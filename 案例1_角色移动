using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Windows;
using System;

//【本脚本 放在了A1_Player里面】
public class C001_CharacterMove : MonoBehaviour
{
    //V001_CharacterMove (Make Character Able to move WASD)角色移动逻辑
    [Header("float(s)")]
    [SerializeField] 
    [Tooltip("❤ Character Movement Speed = 1.0f\n(Recommand Value: 5)\n角色移动速度，默认值推荐值5f")]
    float speed = 1.0f;//Character Movement Speed

    [SerializeField] 
    [Tooltip("❤ The AD Horizontal Clamp Player can move = 45f/100\n左右移动Clamp范围，默认45%")]
    float ClampAD1 = 45f/100;//45%
    void V001_CharacterMove()//角色移动逻辑
        {
        transform.Translate(UnityEngine.Input.GetAxis("Horizontal")*speed*Time.deltaTime,UnityEngine.Input.GetAxis("Vertical")*speed*Time.deltaTime,0);
        transform.position = new Vector3(Mathf.Clamp(transform.position.x,-ActualCameraAD,ActualCameraAD),transform.position.y,transform.position.z);//Mathf.Clamp//跟新物体位置到Clamp
        }
    //V002_InitializeCameraSize (Get the Orthographic Camera Size）摄像机范围get逻辑
    //Get到orthographic main camera 摄像机的默认距离值
    float CameraWS;//must = after Game Start
    float CameraAD;//must = after Game Start
    float CameraAspect;//must = after Game Start
    //ADClamp
    float ActualCameraAD;//must = after Game Start-被我clamp之后的值
    void V002_InitializeCameraSize()
    { 
      CameraWS=Camera.main.orthographicSize;//5 恒定为5，除非我修改
      CameraAspect=Camera.main.aspect;//Width/Height 宽高比
      CameraAD=CameraWS*CameraAspect;//计算得出宽度
     //ADClamp
      ActualCameraAD=CameraAD*ClampAD1;//45%-Clamp为45%的可移动范围
    }
    //V003_CharacterWSClampLogic (Make Character Loop when go up&down) 上下移动鬼打墙逻辑
    //上下移动时候的鬼打墙效果
    void V003_CharacterWSLoopLogic()//满足条件后，充值位置
    { 
        if(transform.position.y>CameraWS)
        transform.position = new Vector3(transform.position.x,-CameraWS,0);
        else if (transform.position.y<-CameraWS)
        transform.position = new Vector3(transform.position.x,CameraWS,0);
    }
    //V004_Bullet (Instantiate Bullet Logic) 发射子弹逻辑
    [Header("GameObject")]
    [SerializeField] 
    [Tooltip("❤ Drag \"Bullet\" Prefab Here!!\n把子弹prefab放到这里")]
    GameObject Bullet;//

    [Header("AudioSource")]
    [SerializeField] 
    [Tooltip("❤Please drag the \"Audio Source\" component to here!!\n把下面的音频文件拖到这里去\n(AudioClip里记得填入声音)")]
    AudioSource AS;
    void V004_SpawnActor()//Instantiate GameObject 生成子弹的逻辑
    { 
        if(UnityEngine.Input.GetKeyDown(KeyCode.Space)) //暂时是空格键输入
        { 
        Instantiate(Bullet,transform.position,transform.rotation); //Gameobj; position; rotation //Quaternion.identitys
        AS.Play(); //Play Audio
        }
    }

    //V005_Mouse Cursor Direction Logic (Make Player Rotate) 跟随鼠标旋转逻辑
    Vector3 PositionOriginal;//Original Cursor Place 初始鼠标位置
    Vector3 PositionActual;//Original Cursor Place+without Z Axis 初始鼠标位置（Z轴归零）
    void V005_MouseCursor()
    {
        PositionOriginal=Camera.main.ScreenToWorldPoint(UnityEngine.Input.mousePosition);//x,y
        PositionActual=new Vector3 (PositionOriginal.x,PositionOriginal.y,0);
    }
    void V006_LookAtOnlyzAxis()//lookat();3D 2D //Only Rotate the Z Axis, Keep other Axis static//只旋转Z轴，XY轴不动的计算和逻辑
    { 
      Vector3 Dis = PositionActual-this.transform.position;
      Dis.Normalize();
      float Z= (Mathf.Atan2(Dis.y,Dis.x)*Mathf.Rad2Deg)-90;//Count Degree
      transform.rotation=Quaternion.Euler(0,0,Z);// Apply to 'this' main character rotation
    }
    
    void Start()
    {
       V002_InitializeCameraSize();//Get初始摄像机 长宽 值
    }  
    void Update()
    {
       //角色移动和loop逻辑
       V001_CharacterMove();
       V003_CharacterWSLoopLogic();
       //子弹逻辑
       V004_SpawnActor();
       //随鼠标位置Rotate逻辑
       V005_MouseCursor();
       V006_LookAtOnlyzAxis();
    }
}
