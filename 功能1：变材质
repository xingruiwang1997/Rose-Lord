using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class C001_ColorFlow : MonoBehaviour
{
//【在inspector里填入 需要的 prefab 和 Material。然后get到全体子物体的MeshRenderer 数组[]】
    [SerializeField]GameObject A;
    [SerializeField]Material B;
    MeshRenderer []C;//Array 
    void V001_InitialMeshRenderer()
    { 
        C=A.GetComponentsInChildren<MeshRenderer>();//s InChildren
    }//V001_InitialMeshRenderer
//【自定义各种输入类型，包括鼠标，键盘E，自动变色，和停止自动变色功能】
enum LSL_Input
    { 
        None=0,//
        Mouse =1,
        Ekey=2,
        IsTick=3,
        NonIsTick=4,
    }

    LSL_Input CurrentInput = LSL_Input.None;
    [SerializeField] bool isTick = false;
    void V002_IsCurrentInput()
    { 
        if(Input.GetMouseButtonDown(0)){CurrentInput = LSL_Input.Mouse;isTick=false; }//【加了IsTick=false】
        else if(Input.GetKeyDown(KeyCode.E)){CurrentInput = LSL_Input.Ekey;isTick=false; }
        else if(isTick)CurrentInput = LSL_Input.IsTick;
        else if(!isTick)CurrentInput = LSL_Input.NonIsTick;
        //print(CurrentInput);
    }//V002_IsCurrentInput
//【最关键的变色逻辑，在多处被调用】
Material DefaultMat;
    byte IndexMat = 5;//0-5
    void V003 ()
    { 
        foreach(var V in C) //MeshRenderer=var
        {
            V.material = DefaultMat;
        }
        C[IndexMat].material = B;
        IndexMat++;
        if(IndexMat>5) IndexMat = 0;
    }//V003_ChangeColor !!!
//【自动变色，0.5秒逻辑】
float LTime = 0;
    [SerializeField]float WaitTime = 0.5f;
    void V004_WaitTimer()
        {
        LTime += Time.deltaTime;//Ltime++ (s)
        if(LTime>WaitTime) 
        {V003();
        LTime -=WaitTime;}
        }//v004_Wait0.5s
//【最后整合一下，填入Update的东西】
void V005_Input()
    { 
        switch(CurrentInput)
            { 
            case LSL_Input.Mouse:
            if(Input.GetMouseButtonDown(0))V003();
            break;
            case LSL_Input.Ekey:
            if(Input.GetKeyDown(KeyCode.E))V003();
            break;
            case LSL_Input.IsTick:
            V004_WaitTimer();
            break;
            case LSL_Input.NonIsTick:
            default:
            break;
            }
    }//V005_
//【Start和Update】
    void Start()
    {
        V001_InitialMeshRenderer();
        DefaultMat = C[0].material;
    }
    void Update()//【需要不停判断我们的输入类型，并根据输入类型，执行V005的命令】
    {
        V002_IsCurrentInput();//Judge Input
        V005_Input();
    }
}
